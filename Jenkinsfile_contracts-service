
def repoName  = 'git@gitlab.chisw.us:insk/contracts-service.git'
def repoCreds = 'ssh_gitlab'
def notifySlack(String buildStatus = 'STARTED') {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'

    def color

    if (buildStatus == 'STARTED') {
        color = '#D4DADF'
    } else if (buildStatus == 'SUCCESS') {
        color = '#BDFFC3'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }

    def msg = "${buildStatus}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

    slackSend(color: color, message: msg)
}

timestamps {
    ansiColor('xterm') {
        node('nodes') {
            stage('Checkout Code') {
                checkout([
                    $class                           : 'GitSCM',
                    branches                         : [[name: "origin/${BRANCH_NAME}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions                       : [[
                        $class: 'UserIdentity',
                        email : 'alexandr.kurilo@chisw.com',
                        name  : 'INSK Jenkins'
                    ]],
                    userRemoteConfigs: [[
                        credentialsId: repoCreds,
                        url          : repoName,
                        poll         : true
                    ]]
                ])
                short_commit = sh(
                    returnStdout: true,
                    script: 'git rev-parse --short HEAD'
                ).trim()
                currentBuild.displayName = "${currentBuild.id}_${BRANCH_NAME}-${short_commit}"
            }
             stage('docker-compose update') {
                sh 'docker-compose -f /home/userssh/docker-compose.yml up --no-deps --build -d contracts-service'
                slackSend color: 'good', message: 'Message from Jenkins Pipeline'
            }
        }
        node('nodes') {
            try {
                notifySlack()

                // Existing build steps.
            } catch (e) {
                currentBuild.result = 'FAILURE'
                throw e
            } finally {
                notifySlack(currentBuild.result)
            }
        }
    }
}